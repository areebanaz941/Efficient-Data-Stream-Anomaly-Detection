# -*- coding: utf-8 -*-
"""Efficient Data Stream Anomaly Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JXkIyRqOrv83A7_JIxe2TvMY4aMmfSyh
"""

import numpy as np
import matplotlib.pyplot as plt
from collections import deque
from scipy.stats import zscore
import geopandas as gpd
import folium
from folium.plugins import HeatMap

class AnomalyDetector:
    def __init__(self, window_size=100, z_threshold=3.0):
        self.window_size = window_size
        self.z_threshold = z_threshold
        self.window = deque(maxlen=window_size)

    def is_anomaly(self, value):
        self.window.append(value)
        if len(self.window) < self.window_size:
            return False
        z_scores = zscore(list(self.window))
        return abs(z_scores[-1]) > self.z_threshold

def generate_data_stream(n_points=1000):
    time = np.linspace(0, 10, n_points)
    trend = 0.1 * time
    seasonal = 2 * np.sin(2 * np.pi * time)
    noise = np.random.normal(0, 0.5, n_points)
    anomalies = np.zeros(n_points)
    anomalies[np.random.choice(n_points, 10, replace=False)] = np.random.uniform(5, 10, 10)
    return trend + seasonal + noise + anomalies

def generate_spatial_data(n_points=1000):
    # Generate random lat/lon coordinates (for example, around New York City)
    latitudes = np.random.uniform(40.5, 41.0, n_points)
    longitudes = np.random.uniform(-74.3, -73.7, n_points)
    values = generate_data_stream(n_points)
    return latitudes, longitudes, values

def visualize_stream(data, anomalies):
    plt.figure(figsize=(12, 6))
    plt.plot(data, label='Data Stream')
    plt.scatter(np.where(anomalies)[0], data[anomalies], color='red', label='Anomalies')
    plt.title('Data Stream with Anomalies')
    plt.xlabel('Time')
    plt.ylabel('Value')
    plt.legend()
    plt.show()

def visualize_gis(latitudes, longitudes, values, anomalies):
    # Create a GeoDataFrame
    gdf = gpd.GeoDataFrame(
        {'value': values, 'anomaly': anomalies},
        geometry=gpd.points_from_xy(longitudes, latitudes)
    )

    # Create a base map centered on the mean coordinates
    m = folium.Map(location=[latitudes.mean(), longitudes.mean()], zoom_start=10)

    # Add a heatmap layer
    HeatMap(data=gdf[['geometry', 'value']].apply(lambda row: [row['geometry'].y, row['geometry'].x, row['value']], axis=1).tolist()).add_to(m)

    # Add markers for anomalies
    for idx, row in gdf[gdf['anomaly']].iterrows():
        folium.Marker(
            location=[row.geometry.y, row.geometry.x],
            popup=f"Value: {row['value']:.2f}",
            icon=folium.Icon(color='red', icon='info-sign')
        ).add_to(m)

    # Save the map
    m.save("anomaly_map.html")
    print("Map saved as 'anomaly_map.html'")

def main():
    # Generate spatial data stream
    latitudes, longitudes, data_stream = generate_spatial_data()

    # Initialize anomaly detector
    detector = AnomalyDetector()

    # Detect anomalies
    anomalies = np.array([detector.is_anomaly(value) for value in data_stream])

    # Visualize results
    visualize_stream(data_stream, anomalies)
    visualize_gis(latitudes, longitudes, data_stream, anomalies)

    # Print summary
    print(f"Total points: {len(data_stream)}")
    print(f"Anomalies detected: {np.sum(anomalies)}")

if __name__ == "__main__":
    main()

