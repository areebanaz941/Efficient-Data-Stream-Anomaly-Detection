# -*- coding: utf-8 -*-
"""anomaly_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17LKT_J-Z2A0RARYE_0468zAYuzj26_0R
"""

import numpy as np
import matplotlib.pyplot as plt
from collections import deque
from scipy.stats import zscore
import geopandas as gpd
import folium
from folium.plugins import HeatMap
import time

class AnomalyDetector:
    def __init__(self, window_size=100, z_threshold=3.0):
        self.window_size = window_size
        self.z_threshold = z_threshold
        self.window = deque(maxlen=window_size)

    def is_anomaly(self, value):
        self.window.append(value)
        if len(self.window) < self.window_size:
            return False
        z_scores = zscore(list(self.window))
        return abs(z_scores[-1]) > self.z_threshold

def generate_real_time_data_stream():
    """Simulates real-time data generation by yielding one data point at a time."""
    time_val = 0
    while True:
        time_val += 0.1
        trend = 0.1 * time_val
        seasonal = 2 * np.sin(2 * np.pi * time_val)
        noise = np.random.normal(0, 0.5)
        anomaly = 0
        if np.random.rand() < 0.05:  # Simulate a random anomaly with 1% probability
            anomaly = np.random.uniform(5, 10)
        yield trend + seasonal + noise + anomaly
        time.sleep(0.25)  # Simulate a small delay between data points

def process_real_time_data(detector):
    latitudes = []
    longitudes = []
    values = []
    anomalies_detected = []

    data_stream = generate_real_time_data_stream()

    for i, value in enumerate(data_stream):
        # Simulate random GPS coordinates
        latitudes.append(np.random.uniform(40.5, 41.0))
        longitudes.append(np.random.uniform(-74.3, -73.7))
        values.append(value)

        # Anomaly detection in real-time
        anomaly = detector.is_anomaly(value)
        anomalies_detected.append(anomaly)

        # Update every 100 points or so (or after some time)
        if i % 100 == 0:
            print(f"Data point {i}, Value: {value:.2f}, Anomaly: {anomaly}")

            # Real-time plot and save GIS map with unique filename
            visualize_stream(values, anomalies_detected)
            visualize_gis(latitudes, longitudes, values, anomalies_detected, f"anomaly_map_{i}.html")

def visualize_stream(data, anomalies):
    plt.figure(figsize=(12, 6))
    plt.plot(data, label='Data Stream')
    plt.scatter(np.where(anomalies)[0], np.array(data)[anomalies], color='red', label='Anomalies')
    plt.title('Data Stream with Anomalies')
    plt.xlabel('Time')
    plt.ylabel('Value')
    plt.legend()
    plt.show()

def visualize_gis(latitudes, longitudes, values, anomalies, filename):
    gdf = gpd.GeoDataFrame(
        {'value': values, 'anomaly': anomalies},
        geometry=gpd.points_from_xy(longitudes, latitudes)
    )
    m = folium.Map(location=[np.mean(latitudes), np.mean(longitudes)], zoom_start=10)
    HeatMap(data=gdf[['geometry', 'value']].apply(lambda row: [row['geometry'].y, row['geometry'].x, row['value']],
                                                  axis=1).tolist()).add_to(m)

    for idx, row in gdf[gdf['anomaly']].iterrows():
        folium.Marker(
            location=[row.geometry.y, row.geometry.x],
            popup=f"Value: {row['value']:.2f}",
            icon=folium.Icon(color='red', icon='info-sign')
        ).add_to(m)

    m.save(filename)
    print(f"Map saved as '{filename}'")

def main():
    detector = AnomalyDetector()
    process_real_time_data(detector)

if __name__ == "__main__":
    main()